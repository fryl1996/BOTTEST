import os
import random
import logging
import aiohttp
import aiosqlite
import asyncio
import json
from dotenv import load_dotenv
from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from cryptography.fernet import Fernet
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(filename='bot.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()
API_ID = int(os.getenv("API_ID", 0))
API_HASH = os.getenv("API_HASH", "")
BOT_TOKEN = os.getenv("BOT_TOKEN", "")
CRYPTO_BOT_API = os.getenv("CRYPTO_BOT_API", "")
ADMIN_ID = int(os.getenv("ADMIN_ID", 0))  # –î–æ–±–∞–≤–ª—è–µ–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

if not all([API_ID, API_HASH, BOT_TOKEN, CRYPTO_BOT_API, ADMIN_ID]):
    raise ValueError("‚ùå –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–¥–∞–Ω—ã –≤ .env —Ñ–∞–π–ª–µ!")

# –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
KEY_FILE = "fernet_key.key"
if os.path.exists(KEY_FILE):
    with open(KEY_FILE, "rb") as key_file:
        key = key_file.read()
else:
    key = Fernet.generate_key()
    with open(KEY_FILE, "wb") as key_file:
        key_file.write(key)

cipher_suite = Fernet(key)
encrypted_token = cipher_suite.encrypt(BOT_TOKEN.encode())

bot = Client("crypto_payment_bot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)

async def send_admin_notification(message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""
    try:
        await bot.send_message(ADMIN_ID, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {message}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

async def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    try:
        async with aiosqlite.connect("bot.db") as db:
            await db.execute('''CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                language TEXT DEFAULT 'ru',
                first_purchase_done INTEGER DEFAULT 0,
                wallet_balance REAL DEFAULT 0,
                is_premium INTEGER DEFAULT 0
            )''')
            await db.execute('''CREATE TABLE IF NOT EXISTS purchases (
                purchase_id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                amount REAL,
                status TEXT,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
            )''')
            await db.execute('''CREATE TABLE IF NOT EXISTS referrals (
                user_id INTEGER PRIMARY KEY,
                referred_by INTEGER,
                bonus REAL DEFAULT 0
            )''')
            await db.commit()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        await send_admin_notification(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

async def cleanup_old_purchases():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)."""
    try:
        async with aiosqlite.connect("bot.db") as db:
            thirty_days_ago = (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d %H:%M:%S')
            await db.execute('DELETE FROM purchases WHERE timestamp < ?', (thirty_days_ago,))
            await db.commit()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
        await send_admin_notification(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {e}")

@bot.on_message(filters.command("start"))
async def start(client, message):
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    referred_by = None

    if len(message.command) > 1:
        try:
            referred_by = int(message.command[1])
        except ValueError:
            logging.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: {message.command[1]}")
            referred_by = None

    async with aiosqlite.connect("bot.db") as db:
        await db.execute('''INSERT OR IGNORE INTO users (user_id, username, language, first_purchase_done) VALUES (?, ?, 'ru', 0)''', (user_id, user_name))
        if referred_by:
            await db.execute('INSERT OR IGNORE INTO referrals (user_id, referred_by) VALUES (?, ?)', (user_id, referred_by))
        await db.commit()

    language = await get_user_language(user_id)
    text = "–ü—Ä–∏–≤–µ—Ç, {}! üéâ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:".format(user_name) if language == "ru" else "Hello, {}! üéâ Choose an action:".format(user_name)

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç—å —á–µ–∫ –∑–∞ 100‚ÇΩ" if language == "ru" else "üí≥ Buy a check for $1.5", callback_data="buy_check")],
        [InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞" if language == "ru" else "üìû Support", url="https://t.me/your_support")],
        [InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫" if language == "ru" else "üìú Purchase History", callback_data="history")],
        [InlineKeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞" if language == "ru" else "üë• Referral System", callback_data="ref")],
        [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å" if language == "ru" else "üí∞ Balance", callback_data="balance")]
    ])
    await message.reply_text(text, reply_markup=keyboard)

async def get_user_language(user_id):
    async with aiosqlite.connect("bot.db") as db:
        async with db.execute('SELECT language FROM users WHERE user_id = ?', (user_id,)) as cursor:
            result = await cursor.fetchone()
    return result[0] if result else "ru"

# üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å —á–µ–∫"
@bot.on_callback_query(filters.regex("buy_check"))
async def buy_check(client, callback_query):
    user_id = callback_query.from_user.id
    language = await get_user_language(user_id)

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üí∞ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ CryptoBot", callback_data="pay_cryptobot")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥" if language == "ru" else "üîô Back", callback_data="back_to_main")]
    ])

    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: üí∞ CryptoBot" if language == "ru" else "Choose a payment method: üí∞ CryptoBot",
        reply_markup=keyboard
    )

# üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ CryptoBot"
@bot.on_callback_query(filters.regex("pay_cryptobot"))
async def pay_with_crypto_bot(client, callback_query):
    user_id = callback_query.from_user.id
    language = await get_user_language(user_id)

    try:
        async with aiohttp.ClientSession() as session:
            url = "https://pay.crypt.bot/api/createInvoice"
            headers = {"Crypto-Pay-API-Token": CRYPTO_BOT_API}
            data = {"asset": "USDT", "amount": 1.5, "description": "–û–ø–ª–∞—Ç–∞ –∑–∞ —á–µ–∫"}

            async with session.post(url, json=data, headers=headers) as response:
                result = await response.json()

                if "result" in result:
                    pay_url = result["result"]["pay_url"]
                    invoice_id = result["result"]["invoice_id"]
                    keyboard = InlineKeyboardMarkup([
                        [InlineKeyboardButton("üí∞ –û–ø–ª–∞—Ç–∏—Ç—å", url=pay_url)],
                        [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"check_payment_{invoice_id}")],
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥" if language == "ru" else "üîô Back", callback_data="buy_check")]
                    ])
                    await callback_query.message.edit_text(
                        f"üí≥ –û–ø–ª–∞—Ç–∏—Ç–µ 1.5 USDT:\n[–û–ø–ª–∞—Ç–∏—Ç—å 1.5 USDT]({pay_url})\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ \"‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª\"." if language == "ru" else f"üí≥ Pay 1.5 USDT:\n[Pay 1.5 USDT]({pay_url})\nAfter payment, click \"‚úÖ I Paid\".",
                        disable_web_page_preview=True,
                        reply_markup=keyboard
                    )
                else:
                    await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞." if language == "ru" else "‚ùå Error creating payment.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ —á–µ—Ä–µ–∑ CryptoBot: {e}")
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–Ø –æ–ø–ª–∞—Ç–∏–ª"
@bot.on_callback_query(filters.regex(r"^check_payment_"))
async def check_payment(client, callback_query):
    user_id = callback_query.from_user.id
    language = await get_user_language(user_id)
    invoice_id = callback_query.data.split("_")[2]

    try:
        async with aiohttp.ClientSession() as session:
            url = "https://pay.crypt.bot/api/getInvoices"
            headers = {"Crypto-Pay-API-Token": CRYPTO_BOT_API}
            params = {"invoice_ids": invoice_id}

            async with session.get(url, headers=headers, params=params) as response:
                result = await response.json()

                if result.get("result", {}).get("items", [])[0].get("status") == "paid":
                    # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    async with aiosqlite.connect("bot.db") as db:
                        await db.execute('''INSERT INTO purchases (user_id, amount, status) VALUES (?, ?, ?)''', (user_id, 1.5, 'paid'))
                        await db.commit()

                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π —Å—É–º–º—ã –æ—Ç 0.03 –¥–æ 0.2 USDT
                    random_amount = round(random.uniform(0.03, 0.2), 2)

                    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–µ–∫–∞ —á–µ—Ä–µ–∑ CryptoBot API
                    data = {
                        "asset": "USDT",
                        "amount": random_amount,
                        "description": f"–ß–µ–∫ –∑–∞ {random_amount} USDT"
                    }

                    async with session.post("https://pay.crypt.bot/api/createInvoice", json=data, headers=headers) as response:
                        result = await response.json()

                        if "result" in result:
                            pay_url = result["result"]["pay_url"]
                            keyboard = InlineKeyboardMarkup([
                                [InlineKeyboardButton(f"üí∞ –û–ø–ª–∞—Ç–∏—Ç—å {random_amount} USDT", url=pay_url)],
                                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥" if language == "ru" else "üîô Back", callback_data="back_to_main")]
                            ])
                            await callback_query.message.edit_text(
                                f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ù–æ–≤—ã–π —á–µ–∫ –Ω–∞ {random_amount} USDT –±—ã–ª —Å–æ–∑–¥–∞–Ω.\n[–û–ø–ª–∞—Ç–∏—Ç—å {random_amount} USDT]({pay_url})" if language == "ru" else f"‚úÖ Payment confirmed! A new check for {random_amount} USDT has been created.\n[Pay {random_amount} USDT]({pay_url})",
                                disable_web_page_preview=True,
                                reply_markup=keyboard
                            )
                        else:
                            await callback_query.message.edit_text(
                                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —á–µ–∫–∞." if language == "ru" else "‚ùå Error creating a new check."
                            )
                else:
                    keyboard = InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥" if language == "ru" else "üîô Back", callback_data="buy_check")]
                    ])
                    await callback_query.message.edit_text(
                        "‚ùå –û—à–∏–±–∫–∞: –ü–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω." if language == "ru" else "‚ùå Error: Payment not found.",
                        reply_markup=keyboard
                    )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫"
@bot.on_callback_query(filters.regex("history"))
async def history(client, callback_query):
    user_id = callback_query.from_user.id
    language = await get_user_language(user_id)

    try:
        async with aiosqlite.connect("bot.db") as db:
            async with db.execute('SELECT amount, status, timestamp FROM purchases WHERE user_id = ?', (user_id,)) as cursor:
                purchases = await cursor.fetchall()

        if purchases:
            text = "üìú –í–∞—à–∏ –ø–æ–∫—É–ø–∫–∏:\n" if language == "ru" else "üìú Your purchases:\n"
            for purchase in purchases:
                amount, status, timestamp = purchase
                text += f"üí≥ {amount} USDT, {status}, {timestamp}\n"
        else:
            text = "üìú –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫." if language == "ru" else "üìú You have no purchases yet."

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥" if language == "ru" else "üîô Back", callback_data="back_to_main")]
        ])
        await callback_query.message.edit_text(text, reply_markup=keyboard)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫: {e}")
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"
@bot.on_callback_query(filters.regex("ref"))
async def ref(client, callback_query):
    user_id = callback_query.from_user.id
    language = await get_user_language(user_id)

    try:
        ref_link = f"https://t.me/your_bot?start={user_id}"
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥" if language == "ru" else "üîô Back", callback_data="back_to_main")]
        ])
        await callback_query.message.edit_text(
            f"üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å—ã!\n–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {ref_link}" if language == "ru" else f"üë• Invite friends and get bonuses!\nYour referral link: {ref_link}",
            reply_markup=keyboard
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: {e}")
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@bot.on_callback_query(filters.regex("back_to_main"))
async def back_to_main(client, callback_query):
    user_id = callback_query.from_user.id
    user_name = callback_query.from_user.first_name
    language = await get_user_language(user_id)

    text = "–ü—Ä–∏–≤–µ—Ç, {}! üéâ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:".format(user_name) if language == "ru" else "Hello, {}! üéâ Choose an action:".format(user_name)

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç—å —á–µ–∫ –∑–∞ 100‚ÇΩ" if language == "ru" else "üí≥ Buy a check for $1.5", callback_data="buy_check")],
        [InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞" if language == "ru" else "üìû Support", url="https://t.me/your_support")],
        [InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫" if language == "ru" else "üìú Purchase History", callback_data="history")],
        [InlineKeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞" if language == "ru" else "üë• Referral System", callback_data="ref")],
        [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å" if language == "ru" else "üí∞ Balance", callback_data="balance")]
    ])
    await callback_query.message.edit_text(text, reply_markup=keyboard)

# üìå –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@bot.on_message(filters.command("stats") & filters.user(ADMIN_ID))
async def stats(client, message):
    try:
        async with aiosqlite.connect("bot.db") as db:
            async with db.execute('SELECT COUNT(*) FROM users') as cursor:
                total_users = (await cursor.fetchone())[0]
            async with db.execute('SELECT COUNT(*) FROM purchases WHERE status = "paid"') as cursor:
                total_purchases = (await cursor.fetchone())[0]
            async with db.execute('SELECT SUM(amount) FROM purchases WHERE status = "paid"') as cursor:
                total_revenue = (await cursor.fetchone())[0] or 0

        text = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"üí≥ –í—Å–µ–≥–æ –ø–æ–∫—É–ø–æ–∫: {total_purchases}\n"
            f"üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {total_revenue} USDT"
        )
        await message.reply_text(text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ë–∞–ª–∞–Ω—Å"
@bot.on_callback_query(filters.regex("balance"))
async def balance(client, callback_query):
    user_id = callback_query.from_user.id
    language = await get_user_language(user_id)

    try:
        async with aiosqlite.connect("bot.db") as db:
            async with db.execute('SELECT wallet_balance FROM users WHERE user_id = ?', (user_id,)) as cursor:
                balance = await cursor.fetchone()

        text = f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance[0]} USDT" if language == "ru" else f"üí∞ Your balance: {balance[0]} USDT"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å" if language == "ru" else "üí≥ Top up balance", callback_data="top_up_balance")],
            [InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫" if language == "ru" else "üìú Purchase History", callback_data="history")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥" if language == "ru" else "üîô Back", callback_data="back_to_main")]
        ])
        
        await callback_query.message.edit_text(text, reply_markup=keyboard)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞: {e}")
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"
@bot.on_callback_query(filters.regex("top_up_balance"))
async def top_up_balance(client, callback_query):
    user_id = callback_query.from_user.id
    language = await get_user_language(user_id)

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üí∞ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ CryptoBot", callback_data="pay_cryptobot_balance")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥" if language == "ru" else "üîô Back", callback_data="balance")]
    ])

    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: üí∞ CryptoBot" if language == "ru" else "Choose a payment method to top up your balance: üí∞ CryptoBot",
        reply_markup=keyboard
    )

# üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ CryptoBot" –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
@bot.on_callback_query(filters.regex("pay_cryptobot_balance"))
async def pay_with_crypto_bot_balance(client, callback_query):
    user_id = callback_query.from_user.id
    language = await get_user_language(user_id)

    try:
        async with aiohttp.ClientSession() as session:
            url = "https://pay.crypt.bot/api/createInvoice"
            headers = {"Crypto-Pay-API-Token": CRYPTO_BOT_API}
            amount = 5.0  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            data = {"asset": "USDT", "amount": amount, "description": f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount} USDT"}  # –ü—Ä–∏–º–µ—Ä —Å—É–º–º—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è

            async with session.post(url, json=data, headers=headers) as response:
                result = await response.json()

                if "result" in result:
                    pay_url = result["result"]["pay_url"]
                    invoice_id = result["result"]["invoice_id"]
                    keyboard = InlineKeyboardMarkup([
                        [InlineKeyboardButton("üí∞ –û–ø–ª–∞—Ç–∏—Ç—å", url=pay_url)],
                        [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"check_payment_balance_{invoice_id}")],
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥" if language == "ru" else "üîô Back", callback_data="top_up_balance")]
                    ])
                    await callback_query.message.edit_text(
                        f"üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ:\n[–û–ø–ª–∞—Ç–∏—Ç—å {amount} USDT]({pay_url})\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ \"‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª\"." if language == "ru" else f"üí≥ Choose an amount to top up your balance and pay:\n[Pay {amount} USDT]({pay_url})\nAfter payment, click \"‚úÖ I Paid\".",
                        disable_web_page_preview=True,
                        reply_markup=keyboard
                    )
                else:
                    await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞." if language == "ru" else "‚ùå Error creating payment.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ —á–µ—Ä–µ–∑ CryptoBot: {e}")
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–Ø –æ–ø–ª–∞—Ç–∏–ª" –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
@bot.on_callback_query(filters.regex(r"^check_payment_balance_"))
async def check_payment_balance(client, callback_query):
    user_id = callback_query.from_user.id
    language = await get_user_language(user_id)
    invoice_id = callback_query.data.split("_")[3]

    try:
        async with aiohttp.ClientSession() as session:
            url = "https://pay.crypt.bot/api/getInvoices"
            headers = {"Crypto-Pay-API-Token": CRYPTO_BOT_API}
            params = {"invoice_ids": invoice_id}

            async with session.get(url, headers=headers, params=params) as response:
                result = await response.json()

                if result.get("result", {}).get("items", [])[0].get("status") == "paid":
                    # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    async with aiosqlite.connect("bot.db") as db:
                        await db.execute('UPDATE users SET wallet_balance = wallet_balance + ? WHERE user_id = ?', (10.0, user_id))  # –ü—Ä–∏–º–µ—Ä —Å—É–º–º—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
                        await db.commit()

                    await callback_query.message.edit_text(
                        "‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ 10.0 USDT!" if language == "ru" else "‚úÖ Your balance has been topped up with 10.0 USDT!"
                    )
                else:
                    keyboard = InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥" if language == "ru" else "üîô Back", callback_data="top_up_balance")]
                    ])
                    await callback_query.message.edit_text(
                        "‚ùå –û—à–∏–±–∫–∞: –ü–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω." if language == "ru" else "‚ùå Error: Payment not found.",
                        reply_markup=keyboard
                    )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def main():
    await init_db()
    await cleanup_old_purchases()
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await bot.start()
    await asyncio.Event().wait()

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())

import os
import random
import logging
import aiohttp
import aiosqlite
import asyncio
import json
from dotenv import load_dotenv
from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from cryptography.fernet import Fernet
from datetime import datetime, timedelta

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å—É–º–º —á–µ–∫–æ–≤
CHECK_AMOUNTS = {
    "free": (0.01, 0.10),
    "5": (2.5, 6.5),
    "25": (6.5, 30),
    "50": (20, 60),
    "100": (50, 110),
    "250": (130, 270),
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename='bot.log',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()
API_ID = int(os.getenv("API_ID", 0))
API_HASH = os.getenv("API_HASH", "")
BOT_TOKEN = os.getenv("BOT_TOKEN", "")
CRYPTO_BOT_API = os.getenv("CRYPTO_BOT_API", "")
ADMIN_ID = int(os.getenv("ADMIN_ID", 0))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not all([API_ID, API_HASH, BOT_TOKEN, CRYPTO_BOT_API, ADMIN_ID]):
    raise ValueError("‚ùå –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–¥–∞–Ω—ã –≤ .env —Ñ–∞–π–ª–µ!")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
KEY_FILE = "fernet_key.key"
if os.path.exists(KEY_FILE):
    with open(KEY_FILE, "rb") as key_file:
        key = key_file.read()
else:
    key = Fernet.generate_key()
    with open(KEY_FILE, "wb") as key_file:
        key_file.write(key)

cipher_suite = Fernet(key)
encrypted_token = cipher_suite.encrypt(BOT_TOKEN.encode())

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Client("crypto_payment_bot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)

async def send_admin_notification(message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""
    try:
        await bot.send_message(ADMIN_ID, f"‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {message}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

async def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    try:
        async with aiosqlite.connect("bot.db") as db:
            await db.execute('''CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                language TEXT DEFAULT 'ru',
                first_purchase_done INTEGER DEFAULT 0,
                wallet_balance REAL DEFAULT 0,
                is_premium INTEGER DEFAULT 0,
                registration_date DATETIME DEFAULT CURRENT_TIMESTAMP
            )''')
            
            await db.execute('''CREATE TABLE IF NOT EXISTS purchases (
                purchase_id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                amount REAL,
                status TEXT,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                payment_method TEXT
            )''')
            
            await db.execute('''CREATE TABLE IF NOT EXISTS referrals (
                user_id INTEGER PRIMARY KEY,
                referred_by INTEGER,
                bonus REAL DEFAULT 0,
                referred_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )''')
            
            await db.commit()
            logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        await send_admin_notification(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

async def cleanup_old_purchases():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)."""
    try:
        async with aiosqlite.connect("bot.db") as db:
            thirty_days_ago = (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d %H:%M:%S')
            await db.execute('DELETE FROM purchases WHERE timestamp < ?', (thirty_days_ago,))
            await db.commit()
            logging.info("–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
        await send_admin_notification(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {e}")

async def get_user_language(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        async with aiosqlite.connect("bot.db") as db:
            async with db.execute('SELECT language FROM users WHERE user_id = ?', (user_id,)) as cursor:
                result = await cursor.fetchone()
                return result[0] if result else "ru"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return "ru"

@bot.on_message(filters.command("start"))
async def start(client, message):
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    referred_by = None

    if len(message.command) > 1:
        try:
            referred_by = int(message.command[1])
        except ValueError:
            logging.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: {message.command[1]}")
            referred_by = None

    try:
        async with aiosqlite.connect("bot.db") as db:
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await db.execute('''
                INSERT OR IGNORE INTO users 
                (user_id, username, language, first_purchase_done) 
                VALUES (?, ?, 'ru', 0)
            ''', (user_id, user_name))
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
            if referred_by and referred_by != user_id:
                await db.execute('''
                    INSERT OR IGNORE INTO referrals 
                    (user_id, referred_by) 
                    VALUES (?, ?)
                ''', (user_id, referred_by))
            
            await db.commit()

        language = await get_user_language(user_id)
        text = "–ü—Ä–∏–≤–µ—Ç, {}! üéâ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:".format(user_name) if language == "ru" else "Hello, {}! üéâ Choose an action:".format(user_name)

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç—å —á–µ–∫ –∑–∞ 100‚ÇΩ" if language == "ru" else "üí≥ Buy a check for $1.5", callback_data="buy_check")],
            [InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞" if language == "ru" else "üìû Support", url="https://t.me/your_support")],
            [InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫" if language == "ru" else "üìú Purchase History", callback_data="history")],
            [InlineKeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞" if language == "ru" else "üë• Referral System", callback_data="ref")],
            [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å" if language == "ru" else "üí∞ Balance", callback_data="balance")]
        ])
        
        await message.reply_text(text, reply_markup=keyboard)
        logging.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã start: {e}")
        await message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.on_callback_query(filters.regex("buy_check"))
async def buy_check(client, callback_query):
    user_id = callback_query.from_user.id
    language = await get_user_language(user_id)

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("1Ô∏è‚É£ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —á–µ–∫ (1-10 —Ü–µ–Ω—Ç–æ–≤)", callback_data="check_free")],
        [InlineKeyboardButton("2Ô∏è‚É£ –ë–∞–ª–∞–Ω—Å 5$ (—Ä–∞–Ω–¥–æ–º 2.5-6.5$)", callback_data="check_5")],
        [InlineKeyboardButton("2.1 –ë–∞–ª–∞–Ω—Å 25$ (—Ä–∞–Ω–¥–æ–º 6.5-30$)", callback_data="check_25")],
        [InlineKeyboardButton("2.2 –ë–∞–ª–∞–Ω—Å 50$ (—Ä–∞–Ω–¥–æ–º 20-60$)", callback_data="check_50")],
        [InlineKeyboardButton("2.3 –ë–∞–ª–∞–Ω—Å 100$ (—Ä–∞–Ω–¥–æ–º 50-110$)", callback_data="check_100")],
        [InlineKeyboardButton("2.4 –ë–∞–ª–∞–Ω—Å 250$ (—Ä–∞–Ω–¥–æ–º 130-270$)", callback_data="check_250")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥" if language == "ru" else "üîô Back", callback_data="back_to_main")]
    ])

    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–∫—É–ø–∫–∏ —á–µ–∫–∞:" if language == "ru" else "Choose a check purchase option:",
        reply_markup=keyboard
    )

async def create_crypto_payment(amount, description):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ CryptoBot API."""
    try:
        async with aiohttp.ClientSession() as session:
            url = "https://pay.crypt.bot/api/createInvoice"
            headers = {"Crypto-Pay-API-Token": CRYPTO_BOT_API}
            data = {
                "asset": "USDT",
                "amount": amount,
                "description": description
            }

            async with session.post(url, json=data, headers=headers) as response:
                if response.status != 200:
                    raise Exception(f"API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status}")
                
                result = await response.json()
                if "result" not in result:
                    raise Exception("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API")
                
                return result["result"]
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        raise

async def check_crypto_payment(invoice_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ CryptoBot API."""
    try:
        async with aiohttp.ClientSession() as session:
            url = "https://pay.crypt.bot/api/getInvoices"
            headers = {"Crypto-Pay-API-Token": CRYPTO_BOT_API}
            params = {"invoice_ids": invoice_id}

            async with session.get(url, headers=headers, params=params) as response:
                if response.status != 200:
                    raise Exception(f"API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status}")
                
                result = await response.json()
                if "result" not in result or "items" not in result["result"]:
                    raise Exception("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API")
                
                return result["result"]["items"][0] if result["result"]["items"] else None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        raise

@bot.on_callback_query(filters.regex(r"^check_(free|5|25|50|100|250)$"))
async def purchase_check(client, callback_query):
    user_id = callback_query.from_user.id
    language = await get_user_language(user_id)
    check_type = callback_query.data.split("_")[1]

    try:
        min_value, max_value = CHECK_AMOUNTS[check_type]
        random_amount = round(random.uniform(min_value, max_value), 2)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with aiosqlite.connect("bot.db") as db:
            async with db.execute('SELECT wallet_balance FROM users WHERE user_id = ?', (user_id,)) as cursor:
                balance = await cursor.fetchone()

        if not balance or balance[0] < min_value:
            text = "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ." if language == "ru" else "‚ùå Insufficient funds on balance."
        else:
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
            payment_result = await create_crypto_payment(
                amount=min_value,
                description=f"Check purchase ({check_type})"
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with aiosqlite.connect("bot.db") as db:
                await db.execute('''
                    UPDATE users 
                    SET wallet_balance = wallet_balance - ? 
                    WHERE user_id = ?
                ''', (min_value, user_id))
                
                await db.execute('''
                    INSERT INTO purchases 
                    (user_id, amount, status, payment_method) 
                    VALUES (?, ?, ?, ?)
                ''', (user_id, random_amount, 'completed', 'crypto'))
                
                await db.commit()

            text = (
                f"‚úÖ –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —á–µ–∫ –Ω–∞ —Å—É–º–º—É {random_amount} USDT!"
                if language == "ru" else
                f"‚úÖ You have purchased a check for {random_amount} USDT!"
            )

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(
                "üîô –ù–∞–∑–∞–¥" if language == "ru" else "üîô Back",
                callback_data="buy_check"
            )]
        ])

        await callback_query.message.edit_text(text, reply_markup=keyboard)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —á–µ–∫–∞: {e}")
        error_text = (
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            if language == "ru" else
            "‚ùå An error occurred while processing the payment. Please try again later."
        )
        await callback_query.message.edit_text(error_text)

@bot.on_callback_query(filters.regex("balance"))
async def check_balance(client, callback_query):
    user_id = callback_query.from_user.id
    language = await get_user_language(user_id)

    try:
        async with aiosqlite.connect("bot.db") as db:
            async with db.execute('SELECT wallet_balance FROM users WHERE user_id = ?', (user_id,)) as cursor:
                balance = await cursor.fetchone()

        text = (
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance[0]} USDT" if balance else "‚ùå –ë–∞–ª–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"
            if language == "ru" else
            f"üí∞ Your balance: {balance[0]} USDT" if balance else "‚ùå Balance not found"
        )

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(
                "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å" if language == "ru" else "üí≥ Top up balance",
                callback_data="top_up_balance"
                        )],
            [InlineKeyboardButton(
                "üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫" if language == "ru" else "üìú Purchase History",
                callback_data="history"
            )],
            [InlineKeyboardButton(
                "üîô –ù–∞–∑–∞–¥" if language == "ru" else "üîô Back",
                callback_data="back_to_main"
            )]
        ])

        await callback_query.message.edit_text(text, reply_markup=keyboard)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞: {e}")
        await callback_query.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            if language == "ru" else
            "‚ùå Error processing request. Please try again later."
        )

@bot.on_callback_query(filters.regex("history"))
async def history(client, callback_query):
    user_id = callback_query.from_user.id
    language = await get_user_language(user_id)

    try:
        async with aiosqlite.connect("bot.db") as db:
            async with db.execute(
                'SELECT amount, status, timestamp FROM purchases WHERE user_id = ? ORDER BY timestamp DESC LIMIT 10',
                (user_id,)
            ) as cursor:
                purchases = await cursor.fetchall()

        if purchases:
            text = "üìú –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏:\n\n" if language == "ru" else "üìú Your recent purchases:\n\n"
            for amount, status, timestamp in purchases:
                dt = datetime.strptime(timestamp, '%Y-%m-%d %H:%M:%S')
                date_str = dt.strftime('%Y-%m-%d %H:%M')
                text += f"üí≥ {amount} USDT - {status} ({date_str})\n"
        else:
            text = "üìú –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫." if language == "ru" else "üìú You have no purchases yet."

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(
                "üîô –ù–∞–∑–∞–¥" if language == "ru" else "üîô Back",
                callback_data="back_to_main"
            )]
        ])
        
        await callback_query.message.edit_text(text, reply_markup=keyboard)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫: {e}")
        await callback_query.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            if language == "ru" else
            "‚ùå Error processing request. Please try again later."
        )

@bot.on_callback_query(filters.regex("ref"))
async def ref(client, callback_query):
    user_id = callback_query.from_user.id
    language = await get_user_language(user_id)

    try:
        ref_link = f"https://t.me/{(await bot.get_me()).username}?start={user_id}"
        
        async with aiosqlite.connect("bot.db") as db:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
            async with db.execute(
                'SELECT COUNT(*) FROM referrals WHERE referred_by = ?',
                (user_id,)
            ) as cursor:
                referral_count = (await cursor.fetchone())[0]
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –±–æ–Ω—É—Å–æ–≤
            async with db.execute(
                'SELECT SUM(bonus) FROM referrals WHERE referred_by = ?',
                (user_id,)
            ) as cursor:
                total_bonus = (await cursor.fetchone())[0] or 0

        if language == "ru":
            text = (
                f"üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n\n"
                f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{ref_link}\n\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {referral_count}\n"
                f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã: {total_bonus} USDT"
            )
        else:
            text = (
                f"üë• Referral System\n\n"
                f"Your referral link:\n{ref_link}\n\n"
                f"Number of referrals: {referral_count}\n"
                f"Total bonuses: {total_bonus} USDT"
            )

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(
                "üîô –ù–∞–∑–∞–¥" if language == "ru" else "üîô Back",
                callback_data="back_to_main"
            )]
        ])
        
        await callback_query.message.edit_text(text, reply_markup=keyboard)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: {e}")
        await callback_query.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            if language == "ru" else
            "‚ùå Error processing request. Please try again later."
        )

@bot.on_callback_query(filters.regex("back_to_main"))
async def back_to_main(client, callback_query):
    user_id = callback_query.from_user.id
    user_name = callback_query.from_user.first_name
    language = await get_user_language(user_id)

    text = (
        "–ü—Ä–∏–≤–µ—Ç, {}! üéâ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        if language == "ru" else
        "Hello, {}! üéâ Choose an action:"
    ).format(user_name)

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton(
            "üí≥ –ö—É–ø–∏—Ç—å —á–µ–∫ –∑–∞ 100‚ÇΩ" if language == "ru" else "üí≥ Buy a check for $1.5",
            callback_data="buy_check"
        )],
        [InlineKeyboardButton(
            "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞" if language == "ru" else "üìû Support",
            url="https://t.me/your_support"
        )],
        [InlineKeyboardButton(
            "üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫" if language == "ru" else "üìú Purchase History",
            callback_data="history"
        )],
        [InlineKeyboardButton(
            "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞" if language == "ru" else "üë• Referral System",
            callback_data="ref"
        )],
        [InlineKeyboardButton(
            "üí∞ –ë–∞–ª–∞–Ω—Å" if language == "ru" else "üí∞ Balance",
            callback_data="balance"
        )]
    ])
    
    await callback_query.message.edit_text(text, reply_markup=keyboard)

@bot.on_message(filters.command("stats") & filters.user(ADMIN_ID))
async def stats(client, message):
    try:
        async with aiosqlite.connect("bot.db") as db:
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            async with db.execute('SELECT COUNT(*) FROM users') as cursor:
                total_users = (await cursor.fetchone())[0]
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫
            async with db.execute('SELECT COUNT(*) FROM purchases WHERE status = "completed"') as cursor:
                total_purchases = (await cursor.fetchone())[0]
            
            # –û–±—â–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫
            async with db.execute('SELECT SUM(amount) FROM purchases WHERE status = "completed"') as cursor:
                total_revenue = (await cursor.fetchone())[0] or 0
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            yesterday = (datetime.now() - timedelta(days=1)).strftime('%Y-%m-%d %H:%M:%S')
            async with db.execute(
                'SELECT COUNT(*) FROM users WHERE registration_date > ?',
                (yesterday,)
            ) as cursor:
                new_users_24h = (await cursor.fetchone())[0]

        text = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
            f"üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"üìà –ù–æ–≤—ã—Ö –∑–∞ 24 —á–∞—Å–∞: {new_users_24h}\n"
            f"üí≥ –£—Å–ø–µ—à–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫: {total_purchases}\n"
            f"üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {total_revenue:.2f} USDT"
        )
        
        await message.reply_text(text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

async def main():
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await init_db()
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
        await cleanup_old_purchases()
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        await bot.start()
        
        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
        await asyncio.Event().wait()
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except KeyboardInterrupt:
        print("\n‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        loop.close()
